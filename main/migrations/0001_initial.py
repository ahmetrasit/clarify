# Generated by Django 2.2.1 on 2019-05-11 14:57

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import main.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('phone', models.CharField(max_length=15, null=True)),
                ('is_confirmed', models.BooleanField(default=False)),
                ('multilingual', models.BooleanField(default=False)),
                ('created_on', models.DateTimeField(auto_now=True)),
                ('location', models.TextField()),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', main.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now=True)),
                ('location', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='AnswerType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer_type', models.CharField(choices=[('aQ', 'Quick'), ('aS', 'Short'), ('aD', 'Detailed')], default='aS', max_length=2)),
            ],
        ),
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url_path', models.TextField()),
                ('created_on', models.DateTimeField(auto_now=True)),
                ('location', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='AverageRating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.DecimalField(decimal_places=4, max_digits=7)),
            ],
        ),
        migrations.CreateModel(
            name='Bid',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_message', models.TextField()),
                ('created_on', models.DateTimeField(auto_now=True)),
                ('location', models.TextField()),
                ('is_shown', models.BooleanField(default=False)),
                ('is_accepted_by_user', models.BooleanField(default=False)),
                ('is_accepted_by_platform', models.BooleanField(default=False)),
                ('is_fullfilled', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Dewey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField()),
                ('label', models.TextField()),
                ('level', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Dispute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_resolved', models.BooleanField(default=False)),
                ('created_on', models.DateTimeField(auto_now=True)),
                ('resolved_on', models.DateTimeField(null=True)),
                ('location', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='DisputeEvents',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.TextField()),
                ('created_on', models.DateTimeField(auto_now=True)),
                ('location', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Flag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('flag_type', models.CharField(max_length=128)),
                ('created_on', models.DateTimeField(auto_now=True)),
                ('location', models.TextField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='ParticipantType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('participant_type', models.CharField(choices=[('pS', 'Single'), ('pD', 'Duel'), ('pC', 'Competition')], default='pS', max_length=2)),
            ],
        ),
        migrations.CreateModel(
            name='PaymentEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.TextField()),
                ('created_on', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('raw_question', models.TextField()),
                ('processed_question', models.TextField()),
                ('follow_up', models.BooleanField(default=False)),
                ('questionnaire', models.BooleanField(default=False)),
                ('created_on', models.DateTimeField(auto_now=True)),
                ('location', models.TextField()),
                ('answer_types', models.ManyToManyField(to='main.AnswerType')),
                ('attachment', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.Attachment')),
                ('classification', models.ManyToManyField(to='main.Dewey')),
            ],
        ),
        migrations.CreateModel(
            name='QuestionType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_type', models.CharField(choices=[('qF', 'Feedback'), ('qC', 'Clarification'), ('qI', 'Information')], default='qC', max_length=2)),
            ],
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_role', models.CharField(choices=[('rQ', 'Questioner'), ('rA', 'Answerer')], default='questioner', max_length=2)),
                ('score', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='RatingType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating_type', models.CharField(max_length=128)),
            ],
        ),
        migrations.CreateModel(
            name='Record',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url_path', models.TextField()),
                ('properties', models.TextField(null=True)),
                ('created_on', models.DateTimeField(auto_now=True)),
                ('location', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='ResponseTime',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('response_time', models.CharField(choices=[('rF', 'Fast'), ('rS', 'Slow'), ('rA', 'Anytime')], default='rS', max_length=2)),
            ],
        ),
        migrations.CreateModel(
            name='RewardCard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_role', models.CharField(choices=[('rQ', 'Questioner'), ('rA', 'Answerer')], default='rQ', max_length=2)),
                ('card_type', models.CharField(max_length=128)),
                ('created_on', models.DateTimeField(auto_now=True)),
                ('location', models.TextField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RewardPoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_role', models.CharField(choices=[('rQ', 'Questioner'), ('rA', 'Answerer')], default='rQ', max_length=2)),
                ('event', models.CharField(max_length=128)),
                ('point', models.IntegerField()),
                ('created_on', models.DateTimeField(auto_now=True)),
                ('location', models.TextField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserLanguage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language', models.CharField(max_length=128)),
                ('reading_proficiency', models.CharField(choices=[('lN', 'Native'), ('lF', 'Fluent'), ('lP', 'Proficient'), ('lC', 'Conversant'), ('lB', 'Basic')], default='lN', max_length=2)),
                ('writing_proficiency', models.CharField(choices=[('lN', 'Native'), ('lF', 'Fluent'), ('lP', 'Proficient'), ('lC', 'Conversant'), ('lB', 'Basic')], default='lN', max_length=2)),
                ('speaking_proficiency', models.CharField(choices=[('lN', 'Native'), ('lF', 'Fluent'), ('lP', 'Proficient'), ('lC', 'Conversant'), ('lB', 'Basic')], default='lN', max_length=2)),
            ],
        ),
        migrations.CreateModel(
            name='UserLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now=True)),
                ('location', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='UserExpertise',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating_score', models.DecimalField(decimal_places=4, max_digits=7)),
                ('answers', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='main.Answer')),
                ('dewey', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='main.Dewey', unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Transcript',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('created_on', models.DateTimeField(auto_now=True)),
                ('answer', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='transcript_answer', to='main.Answer')),
            ],
        ),
        migrations.CreateModel(
            name='Rewards',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_cards', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='rewards_current_cards', to='main.RewardCard')),
                ('current_points', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='rewards_current_points', to='main.RewardPoint')),
                ('used_cards', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='rewards_used_cards', to='main.RewardCard')),
                ('used_points', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='rewards_used_points', to='main.RewardPoint')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Records',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_type', models.CharField(choices=[('sQ', 'Question'), ('sA', 'Answer')], default='sA', max_length=2)),
                ('created_on', models.DateTimeField(auto_now=True)),
                ('full_audio', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='full_audio_record', to='main.Record')),
                ('full_video', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='full_video_record', to='main.Record')),
                ('intro_audio', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='intro_audio_record', to='main.Record')),
                ('intro_video', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='intro_video_record', to='main.Record')),
            ],
        ),
        migrations.CreateModel(
            name='Ratings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now=True)),
                ('location', models.TextField()),
                ('is_average', models.BooleanField(default=False)),
                ('no_of_votes', models.IntegerField()),
                ('average_ratings', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='main.AverageRating')),
                ('rating_types', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='main.RatingType')),
                ('ratings', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='main.Rating')),
            ],
        ),
        migrations.AddField(
            model_name='rating',
            name='rating_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='main.RatingType'),
        ),
        migrations.AddField(
            model_name='rating',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='QuestionFlags',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(max_length=64)),
                ('is_valid', models.BooleanField()),
                ('created_on', models.DateTimeField(auto_now=True)),
                ('location', models.TextField()),
                ('flags', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='main.Flag')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='main.Question', unique=True)),
            ],
        ),
        migrations.AddField(
            model_name='question',
            name='flags',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='question_flags', to='main.QuestionFlags', unique=True),
        ),
        migrations.AddField(
            model_name='question',
            name='participant_types',
            field=models.ManyToManyField(to='main.ParticipantType'),
        ),
        migrations.AddField(
            model_name='question',
            name='question_types',
            field=models.ManyToManyField(to='main.QuestionType'),
        ),
        migrations.AddField(
            model_name='question',
            name='records',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='main.Records'),
        ),
        migrations.AddField(
            model_name='question',
            name='response_times',
            field=models.ManyToManyField(to='main.ResponseTime'),
        ),
        migrations.AddField(
            model_name='question',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='PaymentReceived',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('method', models.TextField()),
                ('created_on', models.DateTimeField(auto_now=True)),
                ('location', models.TextField()),
                ('amount', models.DecimalField(decimal_places=6, max_digits=20)),
                ('currency', models.CharField(max_length=128)),
                ('status', models.CharField(max_length=64)),
                ('success', models.BooleanField(default=False)),
                ('refund', models.BooleanField(default=False)),
                ('chargeback', models.BooleanField(default=False)),
                ('disputes', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='main.Dispute')),
                ('events', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='main.PaymentEvent')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PaymentMade',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('method', models.TextField()),
                ('created_on', models.DateTimeField(auto_now=True)),
                ('location', models.TextField()),
                ('amount', models.DecimalField(decimal_places=6, max_digits=20)),
                ('currency', models.CharField(max_length=128)),
                ('status', models.CharField(max_length=64)),
                ('success', models.BooleanField(default=False)),
                ('disputes', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='main.Dispute')),
                ('events', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='main.PaymentEvent')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('communication_type', models.CharField(choices=[('cUU', 'User to User'), ('cPU', 'Platform to User'), ('cUP', 'User to Platform'), ('cBC', 'Broadcast')], default='cUU', max_length=3)),
                ('message_type', models.CharField(choices=[('mCO', 'User to User'), ('mIN', 'Information'), ('mRE', 'Request'), ('mTS', 'Time sensitive'), ('mWA', 'Warning'), ('mGN', 'Good news'), ('mSP', 'Spam'), ('mHE', 'Help')], default='mCO', max_length=3)),
                ('created_on', models.DateTimeField(auto_now=True)),
                ('location', models.TextField()),
                ('is_read', models.BooleanField(default=False)),
                ('is_answered', models.BooleanField(default=False)),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='source_user', to=settings.AUTH_USER_MODEL)),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='target_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='dispute',
            name='events',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='main.DisputeEvents'),
        ),
        migrations.AddField(
            model_name='dispute',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Bids',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now=True)),
                ('resolved_on', models.DateTimeField(null=True)),
                ('bids', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='main.Bid')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='main.Question', unique=True)),
                ('winners', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='winners_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='averagerating',
            name='rating_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='main.RatingType', unique=True),
        ),
        migrations.CreateModel(
            name='AnswerFlags',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(max_length=64)),
                ('is_valid', models.BooleanField()),
                ('created_on', models.DateTimeField(auto_now=True)),
                ('location', models.TextField()),
                ('answer', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='main.Answer', unique=True)),
                ('flags', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='main.Flag')),
            ],
        ),
        migrations.AddField(
            model_name='answer',
            name='answer_type',
            field=models.ManyToManyField(to='main.AnswerType'),
        ),
        migrations.AddField(
            model_name='answer',
            name='classification',
            field=models.ManyToManyField(to='main.Dewey'),
        ),
        migrations.AddField(
            model_name='answer',
            name='flags',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='answer_flags', to='main.AnswerFlags', unique=True),
        ),
        migrations.AddField(
            model_name='answer',
            name='participant_type',
            field=models.ManyToManyField(to='main.ParticipantType'),
        ),
        migrations.AddField(
            model_name='answer',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='main.Question'),
        ),
        migrations.AddField(
            model_name='answer',
            name='question_type',
            field=models.ManyToManyField(to='main.QuestionType'),
        ),
        migrations.AddField(
            model_name='answer',
            name='rating',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.Ratings'),
        ),
        migrations.AddField(
            model_name='answer',
            name='records',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='main.Records'),
        ),
        migrations.AddField(
            model_name='answer',
            name='response_time',
            field=models.ManyToManyField(to='main.ResponseTime'),
        ),
        migrations.AddField(
            model_name='answer',
            name='transcript',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='answer_transcript', to='main.Transcript'),
        ),
        migrations.AddField(
            model_name='answer',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Advice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now=True)),
                ('intro_views', models.IntegerField()),
                ('full_views', models.IntegerField()),
                ('answer', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='main.Answer', unique=True)),
                ('full_viewers', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='full_viewer_user', to=settings.AUTH_USER_MODEL)),
                ('intro_viewers', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='intro_viewer_user', to=settings.AUTH_USER_MODEL)),
                ('ratings', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='main.Ratings')),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='answers',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='user_answers', to='main.Answer'),
        ),
        migrations.AddField(
            model_name='user',
            name='bids',
            field=models.ManyToManyField(related_name='user_bids', to='main.Bids'),
        ),
        migrations.AddField(
            model_name='user',
            name='expertises',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='main.UserExpertise'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='languages',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.UserLanguage'),
        ),
        migrations.AddField(
            model_name='user',
            name='locations',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='main.UserLocation'),
        ),
        migrations.AddField(
            model_name='user',
            name='questions',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='user_questions', to='main.Question'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
